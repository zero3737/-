<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 配置注解扫描器 -->
	<context:component-scan
		base-package="top.zero3737">
		<!-- 排除 Servlet 层 -->
		<context:exclude-filter type="regex"
			expression="top.zero3737.controller.*" />
	</context:component-scan>

	<!-- 增加对事务的支持 -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<bean id="PropertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!--读取src目录的db.properties文件 -->
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${mysql.driver}"></property>
		<property name="url" value="${mysql.url}"></property>
		<property name="username" value="${mysql.username}"></property>
		<property name="password" value="${mysql.password}"></property>
	</bean>

	<!-- 配置事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 配置 Spring JDBC -->
	<bean class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- mybatis-spring 整合 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 加载 mapper.xml 文件 -->
		<property name="mapperLocations">
			<array>
				<value>top/zero3737/dao/*.xml</value>
			</array>
		</property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory"></property>
		<!-- 扫描包，自动生成动态代理对象 -->
		<property name="basePackage" value="top.zero3737.dao"></property>
	</bean>

	<!-- 将自定义 Realm 纳入 IOC 容器 -->
	<bean id="myRealm" class="top.zero3737.shiro.MyRealm"></bean>

	<!-- 加载 ini 数据源 -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 加载 ini 数据源； 也可以加载 AuthorizingRealm 数据源，要将继承的 AuthorizingRealm 数据源纳入 
			IOC 容器； 将 ref 指向 纳入 IOC 的 AuthorizingRealm 数据源； 这样就可以根据数据库验证用户信息。 -->
		<property name="realm" ref="myRealm"></property>
	</bean>

	<!-- 自定义过滤器，用于跳转登录用户 URL -->
	<bean id="myAuthc"
		class="top.zero3737.shiro.UserAuthenticationFilter">
		<property name="loginUrl" value="${shiro.remoteServer}" />
	</bean>

	<!-- 加载配置，定义规则 -->
	<bean id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<!-- 定义没有通过验证的跳转页面。默认的是webroot下的login.jsp页面 -->
		<property name="loginUrl"
			value="${shiro.remoteServer}${shiro.loginAdmin}"></property>
		<!-- 加载自定义过滤器 -->
		<property name="filters">
			<map>
				<entry key="myAuthc" value-ref="myAuthc" />
			</map>
		</property>
		<!-- 定义资源访问规则 -->
		<property name="filterChainDefinitions">
			<value>
				/*.html = myAuthc
				/bg/** = authc, roles[admin]
			</value>
		</property>
	</bean>

	<!-- 文件上传配置，接收 formdata 数据 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="-1"></property>
	</bean>

</beans>